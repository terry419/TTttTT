using UnityEngine;
using System.Collections.Generic; // List를 사용할 경우 필요
// CharacterStats와 상호작용할 경우 필요
// using CharacterStats; // CharacterStats가 네임스페이스에 있다면 필요

// EffectExecutor: 카드 및 유물 효과를 실행하는 중앙 관리자입니다.
// 싱글톤 패턴을 사용하여 게임 전체에서 단일 인스턴스만 존재하도록 합니다.
public class EffectExecutor : MonoBehaviour
{
    // EffectExecutor의 단일 인스턴스입니다. 게임 어디에서든 접근할 수 있습니다.
    public static EffectExecutor Instance { get; private set; }

    private PlayerController playerController; // PlayerController 참조

    void Awake()
    {
        // EffectExecutor의 인스턴스가 하나만 존재하도록 보장합니다.
        if (Instance != null && Instance != this)
        {
            Destroy(gameObject);
            return;
        }
        Instance = this;
        // 씬이 변경되어도 이 GameObject가 파괴되지 않도록 유지합니다. 
        DontDestroyOnLoad(gameObject);
    }

    void Start()
    {
        // 씬에서 PlayerController를 찾아 참조를 얻습니다.
        // 씬에 PlayerController가 하나만 있다고 가정합니다.
        playerController = FindObjectOfType<PlayerController>();
        if (playerController == null)
        {
            Debug.LogError("[EffectExecutor] 씬에서 PlayerController를 찾을 수 없습니다. 카드 효과 실행에 문제가 발생할 수 있습니다.");
        }
    }

    /// <summary>
    /// CardDataSO에 정의된 카드 효과를 실행합니다.
    /// </summary>
    /// <param name="card">효과를 실행할 CardDataSO 객체</param>
    public void ExecuteCardEffect(CardDataSO card)
    {
        if (card == null)
        {
            Debug.LogWarning("[EffectExecutor] 실행할 카드 데이터가 null입니다.");
            return;
        }

        Debug.Log($"[EffectExecutor] 카드 효과 실행: {card.cardName} (ID: {card.cardID})");

        // 카드 ID를 기반으로 특정 효과를 처리합니다.
        switch (card.cardID)
        {
            case "card_multiple_001": // 다중 공격 카드
                if (playerController != null)
                {
                    Debug.Log($"[EffectExecutor] 다중 공격 카드 효과: 5발의 총알 발사!");
                    for (int i = 0; i < 5; i++)
                    {
                        if (playerController.bulletPrefab != null && playerController.firePoint != null)
                        {
                            Instantiate(playerController.bulletPrefab, playerController.firePoint.position, playerController.firePoint.rotation);
                        }
                    }
                }
                break;
            case "card_lifesteal_001": // 흡혈 카드
                if (playerController != null && playerController.GetComponent<CharacterStats>() != null)
                {
                    CharacterStats playerStats = playerController.GetComponent<CharacterStats>();
                    // 현재는 입힌 피해량 정보를 직접 받을 수 없으므로, 최대 체력의 일정 비율을 회복하는 방식으로 구현합니다.
                    // 실제 전투 시스템이 구현되면, 입힌 피해량을 기반으로 체력을 회복하도록 수정해야 합니다.
                    float healAmount = playerStats.finalHealth * card.lifestealPercentage; // 최대 체력의 lifestealPercentage만큼 회복
                    // 플레이어의 현재 체력을 회복시키는 로직 (CharacterStats에 현재 체력 필드가 필요)
                    // playerStats.currentHealth = Mathf.Min(playerStats.currentHealth + healAmount, playerStats.finalHealth);
                    Debug.Log($"[EffectExecutor] 흡혈 카드 효과: {healAmount}만큼 체력 회복 (현재는 최대 체력의 {card.lifestealPercentage * 100}% 회복)");
                }
                else
                {
                    Debug.LogWarning("[EffectExecutor] 흡혈 카드 효과를 적용할 PlayerController 또는 CharacterStats를 찾을 수 없습니다.");
                }
                break;
            default:
                // TriggerType 기반의 일반적인 효과 처리 (기존 로직)
                // 여기에 카드 효과를 적용하는 로직을 구현합니다。
                // 예시: 능력치 변경, 총알 발사, 특수 효과 발동 등

                // CharacterStats에 능력치 배율을 적용하는 예시 (CharacterStats 스크립트가 플레이어에게 있다고 가정)
                // PlayerController 등에서 CharacterStats 컴포넌트를 가져와서 적용해야 합니다.
                // 현재는 플레이스홀더 로직입니다.
                // CharacterStats playerStats = FindObjectOfType<PlayerController>()?.GetComponent<CharacterStats>();
                // if (playerStats != null)
                // {
                //     playerStats.cardDamageRatio += card.damageMultiplier;
                //     playerStats.CalculateFinalStats(); // 능력치 재계산
                // }

                switch (card.triggerType)
                {
                    case TriggerType.Interval:
                        Debug.Log($"[EffectExecutor] 주기적 발동 효과: {card.effectDescription}");
                        // 주기적 효과 로직 (예: 일정 시간마다 데미지, 버프 등)
                        break;
                    case TriggerType.OnHit:
                        Debug.Log($"[EffectExecutor] 적중 시 발동 효과: {card.effectDescription}");
                        // 적중 시 효과 로직 (예: 추가 데미지, 상태 이상 적용)
                        break;
                    case TriggerType.OnCrit:
                        Debug.Log($"[EffectExecutor] 치명타 시 발동 효과: {card.effectDescription}");
                        // 치명타 시 효과 로직 (예: 추가 치명타 데미지, 특수 효과)
                        break;
                    case TriggerType.OnSkillUse:
                        Debug.Log($"[EffectExecutor] 스킬 사용 시 발동 효과: {card.effectDescription}");
                        // 스킬 사용 시 효과 로직
                        break;
                    case TriggerType.OnLowHealth:
                        Debug.Log($"[EffectExecutor] 체력 낮을 때 발동 효과: {card.effectDescription}");
                        // 체력 낮을 때 발동 로직
                        break;
                    default:
                        Debug.LogWarning($"[EffectExecutor] 알 수 없는 TriggerType: {card.triggerType}");
                        break;
                }
                break;
        }
    }

    /// <summary>
    /// ArtifactDataSO에 정의된 유물 효과를 실행합니다.
    /// </summary>
    /// <param name="artifact">효과를 실행할 ArtifactDataSO 객체</param>
    public void ExecuteArtifactEffect(ArtifactDataSO artifact)
    {
        if (artifact == null)
        {
            Debug.LogWarning("[EffectExecutor] 실행할 유물 데이터가 null입니다.");
            return;
        }

        Debug.Log($"[EffectExecutor] 유물 효과 실행: {artifact.artifactName} (ID: {artifact.artifactID})");

        // 여기에 유물 효과를 적용하는 로직을 구현합니다.
        // 예시: 능력치 변경, 특수 능력 부여 등
        // 현재는 플레이스홀더 로직입니다.
        // CharacterStats playerStats = FindObjectOfType<PlayerController>()?.GetComponent<CharacterStats>();
        // if (playerStats != null)
        // {
        //     playerStats.artifactDamageRatio += artifact.effectValue; // 예시
        //     playerStats.CalculateFinalStats();
        // }
    }
}