  ---

  Part 3: Gameplay 씬 상세 구현

  게임의 핵심 플레이가 이루어지는 공간입니다. 플레이어, 몬스터, UI 등 모든 요소를 배치하고 연결합니다.

  1. 씬 생성 및 기본 배치

   1. Assets/2.Scenes/ 폴더에 Gameplay 라는 이름의 새 씬을 생성하고 엽니다.
   2. Project 창의 Assets/4.Prefabs/ 폴더에서 _Managers 프리팹을 Hierarchy 창으로 드래그 앤 드롭합니다.

  2. 플레이어 프리팹 제작

   1. Hierarchy에서 Ctrl+Shift+N으로 빈 오브젝트를 생성하고 이름을 Player로 지정합니다.
   2. Player 오브젝트를 선택하고 Inspector에서 Tag 드롭다운을 클릭하여 이전에 만들어 둔 Player 태그를
      선택합니다.
   3. 컴포넌트 추가 및 설정:
       - Add Component를 눌러 Rigidbody 2D를 추가합니다. Gravity Scale을 0으로 설정하여 중력의 영향을 받지
         않게 합니다. Constraints를 펼쳐 Freeze Rotation Z를 체크하여 물리적 충돌로 회전하지 않도록 합니다.
       - Add Component를 눌러 Circle Collider 2D를 추가합니다. 몬스터나 다른 오브젝트와 충돌을 감지하기
         위함입니다.
       - Add Component를 눌러 Player Controller, Character Stats, `PlayerInitializer` 스크립트를 추가합니다.
   4. 자식 오브젝트 생성:
       - Player 오브젝트를 우클릭 -> Create Empty를 선택하여 자식 오브젝트를 만들고, 이름을 FirePoint로
         지정합니다. 이 오브젝트의 Transform Position을 조정하여 총알이 발사될 위치를 지정합니다. (예: X: 0.5,
          Y: 0)
   5. 프리팹화:
       - Player 오브젝트를 Hierarchy에서 Project 창의 Assets/4.Prefabs/ 폴더로 드래그 앤 드롭하여 프리팹으로
         만듭니다.

  3. 몬스터 및 총알 프리팹 제작

   1. 총알 프리팹:
       - Hierarchy에서 UI -> Image 또는 2D Object -> Sprites -> Square 등을 이용해 간단한 총알 모양의
         오브젝트를 만들고 이름을 Bullet으로 지정합니다.
       - Tag를 PlayerBullet으로 설정합니다.
       - Add Component로 Rigidbody 2D를 추가하고 Gravity Scale을 0으로 설정합니다.
       - Add Component로 Circle Collider 2D를 추가하고, Is Trigger를 체크합니다.
           - 이유: Is Trigger를 체크하면 물리적 충돌(튕겨나감) 없이 통과하면서 OnTriggerEnter2D 이벤트를
             발생시킬 수 있습니다. 총알이 몬스터에게 부딪혀 튕겨나가는 대신, 데미지를 주고 사라지게 하는 데
             적합합니다.
       - BulletController 스크립트를 추가합니다.
       - Bullet Controller 컴포넌트의 Bullet Prefab 필드에 Project 창의 Bullet 프리팹 자기 자신을 드래그 앤
         드롭하여 연결합니다. (이 총알이 풀로 돌아갈 때 어떤 프리팹에 속하는지 알려주기 위함입니다.)
       - Bullet 오브젝트를 Assets/4.Prefabs/ 폴더로 드래그하여 프리팹으로 만듭니다.
   2. 몬스터 프리팹:
       - 위와 유사하게 간단한 몬스터 모양의 오브젝트를 만들고 이름을 Monster로 지정합니다.
       - Rigidbody 2D (Gravity Scale: 0), Circle Collider 2D를 추가합니다.
       - MonsterController 스크립트를 추가합니다.
       - Monster Controller 컴포넌트의 Monster Prefab 필드에 Project 창의 Monster 프리팹 자기 자신을 드래그 앤
          드롭하여 연결합니다.
       - Monster 오브젝트를 Assets/4.Prefabs/ 폴더로 드래그하여 프리팹으로 만듭니다.

  4. 게임 로직 및 UI 연결

   1. 라운드 로직 설정:
       - Hierarchy에서 빈 오브젝트를 만들고 _RoundLogic으로 이름을 지정합니다.
       - _RoundLogic에 RoundManager와 MonsterSpawner 스크립트를 추가합니다.
       - Round Manager 컴포넌트의 Monster Spawner 필드에 _RoundLogic 오브젝트를 드래그 앤 드롭합니다.
       - Monster Spawner 컴포넌트의 Monster Prefab 필드에 Project 창의 Monster 프리팹을, Player Transform
         필드에 Hierarchy의 Player 오브젝트를 드래그합니다.
   2. 게임플레이 UI (HUD) 설정:
       - Hierarchy에서 UI -> Canvas를 생성하고 GameplayCanvas로 이름을 지정합니다. (Canvas Scaler 설정
         동일하게)
       - GameplayCanvas 하위에 UI -> Slider를 만들어 Slider_HealthBar로, UI -> Text - TextMeshPro를 두 개
         만들어 Text_Timer, Text_KillCount로 이름을 지정하고 배치합니다.
       - GameplayCanvas에 HUDController 스크립트를 추가합니다.
       - HUD Controller 컴포넌트의 각 필드에 방금 만든 Slider와 Text들을 연결합니다.
   3. GameManager와 연동:
       - _Managers 오브젝트를 선택하고 Game Manager 컴포넌트의 Main Canvas 필드에 GameplayCanvas를 연결합니다.
          (이는 GameManager가 상태에 따라 UI를 켜고 끌 때 사용됩니다.)

   - 최종 확인: Gameplay 씬을 저장합니다. File -> Build Settings...를 열고, Scenes In Build에 MainMenu,
     CharacterSelect, Gameplay 씬을 순서대로 드래그 앤 드롭하여 추가합니다. 게임을 실행하여 MainMenu부터
     Gameplay 씬까지 정상적으로 진입하는지, 플레이어가 움직이는지, 시간이 흐르고 HUD가 표시되는지 확인합니다.
     (몬스터 스폰은 RoundManager.StartRound()가 호출되어야 시작됩니다.)

  ---

  Part 4: CardReward 씬 상세 구현

  라운드 클리어 후 진입하는 카드 보상 씬을 구현합니다. 동적으로 카드 선택지를 생성하고, 사용자의 선택을
  처리합니다.

  1. 씬 생성 및 기본 배치

   1. Assets/2.Scenes/ 폴더에 CardReward 라는 이름의 새 씬을 생성하고 엽니다.
   2. Assets/4.Prefabs/ 폴더에서 _Managers 프리팹을 Hierarchy 창으로 드래그 앤 드롭합니다.

  2. CardDisplay 프리팹 제작

  CardRewardController가 동적으로 생성할 카드 UI 프리팹을 만듭니다.

   1. Hierarchy에서 UI -> Panel을 생성하고 이름을 CardDisplay로 지정합니다.
   2. CardDisplay 하위에 UI -> Image (카드 아이콘), UI -> Text - TextMeshPro (카드 이름), UI -> Text -
      TextMeshPro (카드 설명) 등을 배치합니다.
   3. CardDisplay 오브젝트에 Button 컴포넌트를 추가합니다.
   4. `CardDisplay.cs` 스크립트 생성:
       - Assets/1.Scripts/UI/ 폴더에 CardDisplay.cs 스크립트를 새로 만듭니다.
       - `CardDisplay.cs` 내용:

    1         using UnityEngine;
    2         using UnityEngine.UI;
    3         using TMPro;
    4
    5         /// <summary>
    6         /// 개별 카드 선택지 UI를 표시하고, 클릭 이벤트를 CardRewardController에 전달합니다.
    7         /// </summary>
    8         public class CardDisplay : MonoBehaviour
    9         {
   10             [SerializeField] private Image cardIcon;
   11             [SerializeField] private TextMeshProUGUI cardNameText;
   12             [SerializeField] private TextMeshProUGUI cardDescriptionText;
   13
   14             private CardDataSO currentCardData;
   15             private CardRewardController parentController;
   16
   17             /// <summary>
   18             /// 카드 데이터를 받아 UI를 설정하고, 부모 컨트롤러를 연결합니다.
   19             /// </summary>
   20             public void Setup(CardDataSO cardData, CardRewardController controller)
   21             {
   22                 currentCardData = cardData;
   23                 parentController = controller;
   24
   25                 if (cardIcon != null) cardIcon.sprite = cardData.icon; // TODO: CardDataSO에
      icon 필드 추가 필요
   26                 if (cardNameText != null) cardNameText.text = cardData.cardName;
   27                 if (cardDescriptionText != null) cardDescriptionText.text =
      cardData.effectDescription;
   28
   29                 // 버튼 클릭 시 OnCardClicked 메서드 호출
   30                 GetComponent<Button>().onClick.AddListener(OnCardClicked);
   31             }
   32
   33             private void OnCardClicked()
   34             {
   35                 if (parentController != null)
   36                 {
   37                     parentController.OnCardSelected(currentCardData);
   38                 }
   39             }
   40         }
   5. CardDisplay 오브젝트에 CardDisplay.cs 스크립트를 추가하고, 필드들을 연결합니다.
   6. CardDisplay 오브젝트를 Assets/4.Prefabs/ 폴더로 드래그하여 프리팹으로 만듭니다.

  3. CardReward UI 구성 및 스크립트 연결

   1. Hierarchy에서 UI -> Canvas를 생성하고 GameUICanvas로 이름을 지정합니다. (Canvas Scaler 설정 동일하게)
   2. GameUICanvas 하위에 UI -> Panel을 생성하고 이름을 Panel_CardReward로 지정합니다.
   3. Panel_CardReward에 CardRewardController 스크립트를 추가합니다.
   4. Panel_CardReward 하위에 기획서 레이아웃에 맞춰 카드 슬롯(UI -> Panel 3개), 획득/합성/포기/맵 버튼(UI ->
      Button - TextMeshPro)들을 배치합니다.
   5. CardRewardController 컴포넌트의 필드들을 연결합니다.
       - Card Slots 리스트에 카드 슬롯 패널들을 드래그하여 연결합니다.
       - Acquire Button, Synthesize Button, Skip Button, Map Button 필드에 해당 버튼들을 연결합니다.
       - Card Info Prefab 필드에 Assets/4.Prefabs/CardDisplay 프리팹을 드래그하여 연결합니다.
   6. GameManager의 Main Canvas 필드에 GameUICanvas를 연결합니다.

  ---

  Part 5: Options 씬 상세 구현

  게임 설정(그래픽, 오디오, 언어)을 변경하는 씬입니다.

  1. 씬 생성 및 기본 배치

   1. Assets/2.Scenes/ 폴더에 Options 라는 이름의 새 씬을 생성하고 엽니다.
   2. Assets/4.Prefabs/ 폴더에서 _Managers 프리팹을 Hierarchy 창으로 드래그 앤 드롭합니다.

  2. Options UI 구성 및 스크립트 연결

   1. Hierarchy에서 UI -> Canvas를 생성하고 GameUICanvas로 이름을 지정합니다. (Canvas Scaler 설정 동일하게)
   2. GameUICanvas 하위에 UI -> Panel을 생성하고 이름을 Panel_Options로 지정합니다.
   3. Panel_Options에 OptionsController 스크립트를 추가합니다.
   4. Panel_Options 하위에 기획서 레이아웃에 맞춰 TMP_Dropdown (해상도, 언어), Toggle (전체화면), Slider (BGM,
      SFX 볼륨) 등을 배치합니다.
   5. OptionsController 컴포넌트의 필드들을 연결합니다.
   6. 각 UI 요소의 On Value Changed 이벤트에 OptionsController의 해당 메서드(SetResolution, SetFullscreen,
      SetBgmVolume, SetSfxVolume 등)를 연결합니다.
   7. GameManager의 Main Canvas 필드에 GameUICanvas를 연결합니다.

  ---

  Part 6: Codex 씬 상세 구현

  플레이어가 수집한 카드와 유물 정보를 열람하는 씬입니다.

  1. 씬 생성 및 기본 배치

   1. Assets/2.Scenes/ 폴더에 Codex 라는 이름의 새 씬을 생성하고 엽니다.
   2. Assets/4.Prefabs/ 폴더에서 _Managers 프리팹을 Hierarchy 창으로 드래그 앤 드롭합니다.

  2. Codex UI 구성 및 스크립트 연결

   1. Hierarchy에서 UI -> Canvas를 생성하고 GameUICanvas로 이름을 지정합니다. (Canvas Scaler 설정 동일하게)
   2. GameUICanvas 하위에 UI -> Panel을 생성하고 이름을 Panel_Codex로 지정합니다.
   3. Panel_Codex에 CodexController 스크립트를 추가합니다.
   4. Panel_Codex 하위에 기획서 레이아웃에 맞춰 카드/유물 탭 버튼, 스크롤 뷰, 아이템 정보 표시 영역 등을
      배치합니다.
   5. CodexController 컴포넌트의 필드들을 연결합니다.
       - Item Info Prefab 필드에 CardDisplay 프리팹(또는 Codex 전용 ItemDisplay 프리팹)을 연결합니다.
   6. GameManager의 Main Canvas 필드에 GameUICanvas를 연결합니다.

  ---

  Part 7: 빌드 설정 및 최종 확인

  모든 씬을 만들고 연결했다면, 게임을 빌드할 준비를 합니다.

  1. 빌드 설정에 씬 추가

   1. Unity 에디터 상단 메뉴에서 File -> Build Settings...를 선택합니다.
   2. Scenes In Build 목록에 현재 프로젝트의 모든 씬(MainMenu, CharacterSelect, Gameplay, CardReward, Options,
      Codex)을 드래그 앤 드롭하여 추가합니다.
   3. 중요: 씬의 순서가 중요합니다. MainMenu가 가장 위에(인덱스 0) 있어야 합니다.

  2. 최종 확인

   1. Unity 에디터 상단의 재생(▶) 버튼을 눌러 게임을 실행합니다.
   2. MainMenu부터 시작하여 모든 씬 전환이 원활하게 이루어지는지, 각 UI가 의도대로 작동하는지, 플레이어가
      움직이고 몬스터가 스폰되는지, 라운드 클리어 후 보상 화면으로 넘어가는지 등 게임의 모든 흐름을
      테스트합니다.

  ---

  결론

  본 지시서를 따라 모든 단계를 완료했다면, 이제 8th 프로젝트는 기획서에 명시된 대부분의 핵심 기능이 구현된,
  실제 플레이 가능한 프로토타입 상태가 되었을 것입니다. 각 씬은 유기적으로 연결되고, 데이터는 DataManager를
  통해 관리되며, PoolManager를 통한 성능 최적화까지 고려되었습니다.

  이제 개발자님은 이 기반 위에서 새로운 콘텐츠를 추가하고, 디테일을 다듬어 게임의 완성도를 높여나갈 수
  있습니다.

  수고 많으셨습니다.