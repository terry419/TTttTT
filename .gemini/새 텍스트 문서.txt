**Project Root:** D:\동기화\Unity\9th\
   ... first 3 lines hidden ...
    4 **Project Root:** D:\동기화\Unity\9th\
    5 **Current Working Directory:** D:\동기화\Unity\9th\
    6
    7 ---
    8
    9 ### 1. Overall Goal
   10
   11 Implement a map-based progression system in a Unity project, similar to the one shown in the
      Steam Community link (https://steamcommunity.com/sharedfiles/filedetails/?id=2830078257). Key
      requirements include:
   12 - Keyboard-only input.
   13 - Fixed start (y=0) and end (y=14) nodes as "gameplay" scenes.
   14 - Other nodes with specific probabilities (Monster: 60%, Rest: 15%, Event: 15%, Merchant: 10%),
      configurable in Inspector.
   15 - Automatic start at y=0 after point allocation.
   16 - Complex map structure with branching/merging paths.
   17
   18 ---
   19
   20 ### 2. Resolved Issues & Solutions
   21
   22 The following issues have been identified and resolved, leading to a functional core game loop:
   23
   24 *   **MapManager Initialization Deadlock:**
   25     *   **Problem:** GameManager was stuck waiting for MapManager to initialize.
   26     *   **Solution:** Added `IsMapInitialized` flag to `MapManager.cs` and ensured
      `PointAllocationManager` calls `MapManager.InitializeMap()` to set this flag.
   27 *   **`RouteSelectionController` `new MonoBehaviour()` Error:**
   28     *   **Problem:** `RouteSelectionController` was trying to create `MapGenerator` (a
      MonoBehaviour) using the `new` keyword.
   29     *   **Solution:** Removed `private MapGenerator mapGenerator = new MapGenerator();` from
      `RouteSelectionController.cs`.
   30 *   **`MapManager` `IsMapInitialized` Reset:**
   31     *   **Problem:** `IsMapInitialized` was being reset to `false` in `MapManager.Awake()`,
      causing issues in subsequent scenes.
   32     *   **Solution:** Removed `IsMapInitialized = false;` from `MapManager.Awake()`.
   33 *   **`RewardManager.Instance` Null:**
   34     *   **Problem:** `RewardManager.Instance` was null when trying to generate card rewards.
   35     *   **Solution:** Made `RewardManager` persistent across scenes by adding
      `DontDestroyOnLoad(gameObject);` in its `Awake()`. Ensured it's attached to a GameObject in the
      initial scene.
   36 *   **`PlayerController.Instance` Null in Subsequent Scenes:**
   37     *   **Problem:** `PlayerController.Instance` was null in `EffectExecutor` in subsequent
      `Gameplay` scenes. This was due to `PlayerController` being destroyed and recreated.
   38     *   **Solution:** Made `PlayerController` persistent across scenes by adding
      `DontDestroyOnLoad(gameObject);` in its `Awake()`.
   39 *   **`EffectExecutor` `playerController`/`playerStats` Null:**
   40     *   **Problem:** `EffectExecutor`'s internal references to `playerController` and
      `playerStats` became null.
   41     *   **Solution:** Modified `EffectExecutor.Execute()` to re-acquire
      `PlayerController.Instance` and its `CharacterStats` directly each time it's called.
   42 *   **`SingleShotHandler`/`SplitShotHandler` `playerController` Access:**
   43     *   **Problem:** Card effect handlers were trying to access `executor.playerController`
      directly, which no longer existed.
   44     *   **Solution:** Modified `SingleShotHandler.cs` and `SplitShotHandler.cs` to use
      `PlayerController.Instance` directly.
   45 *   **Map Drawing/Display:**
   46     *   **Problem:** The map UI was not appearing correctly after scene transitions.
   47     *   **Solution:** Modified `MapManager.cs` to store and expose `AllNodes`, `MapWidth`,
      `MapHeight`. Modified `MapGenerator.cs` to expose `MapWidth` and `MapHeight`. Modified
      `PointAllocationManager.cs` to pass these dimensions to `MapManager.InitializeMap()`. Rewrote
      `RouteSelectionController.GenerateMapView()` to correctly fetch and pass this data to
      `MapView.GenerateMapView()`.
   48 *   **Map Structure (Complex Generation):**
   49     *   **Problem:** The initial `MapGenerator` created a simple grid, not the desired
      branching/merging structure.
   50     *   **Solution:** Rewrote `MapGenerator.cs` to implement the user's detailed algorithm: 15x5
      grid, fixed start/end nodes (y=0, x=2; y=14, x=2), 4 random paths with specific movement rules
      (x-1, x, x+1), and deletion of unused nodes.
   51
   52 ---
   53
   54 ### 3. Current Unresolved Issue
   55
   56 *   **Monsters are not spawning in `Gameplay` scenes (Round 2 onwards).**
   57     *   **Symptoms:** Player attacks work, but no monsters appear.
   58     *   **Debugging Status:**
   59         *   `RoundManager.StartRound()` is confirmed to be called.
   60         *   `RoundManager.monsterSpawner` reference is **NOT NULL**.
   61         *   `MonsterSpawner.playerTransform` reference is **NOT NULL**.
   62         *   No `Debug.LogError` or `Debug.LogWarning` messages are coming from
      `MonsterSpawner.cs` related to missing prefabs or data (e.g., "Wave에 몬스터 데이터가 설정되지
      않아...", "프리팹이 연결되지 않았습니다.").
   63         *   `EffectExecutor` and related card handlers are now working, indicating the player's
      attack logic is sound.
   64     *   **Strongest Hypothesis:** The `List<Wave> waves` being passed to
      `MonsterSpawner.StartSpawning()` is **empty**.
   65         *   **Next Debugging Step (Proposed but not confirmed by user):** Add
      `Debug.Log($"[MonsterSpawner] 스폰 루틴 시작. 전달받은 웨이브 개수: {waves.Count}");` at the
      beginning of `MonsterSpawner.SpawnRoutine` (in `Assets/1.Scripts/Gameplay/MonsterSpawner.cs`) to
      confirm if the `waves` list is empty. If `waves.Count` is 0, the problem lies in how
      `RoundDataSO` is being generated or retrieved by `CampaignManager`.
   66
   67 ---
   68
   69 ### 4. Relevant Files (Modified or Central to Problem)
   70
   71 *   `Assets/1.Scripts/Core/GameManager.cs`
   72 *   `Assets/1.Scripts/Core/MapManager.cs`
   73 *   `Assets/1.Scripts/Core/PoolManager.cs`
   74 *   `Assets/1.Scripts/Core/EffectExecutor.cs`
   75 *   `Assets/1.Scripts/Core/DebugManager.cs` (involved in `CharacterStats.OnDestroy`)
   76 *   `Assets/1.Scripts/Core/CampaignManager.cs` (involved in `RoundDataSO` retrieval)
   77 *   `Assets/1.Scripts/Gameplay/RoundManager.cs`
   78 *   `Assets/1.Scripts/Gameplay/MonsterSpawner.cs`
   79 *   `Assets/1.Scripts/Gameplay/PlayerController.cs`
   80 *   `Assets/1.Scripts/Gameplay/CharacterStats.cs`
   81 *   `Assets/1.Scripts/Gameplay/CardEffectHandlers/SingleShotHandler.cs`
   82 *   `Assets/1.Scripts/Gameplay/CardEffectHandlers/SplitShotHandler.cs`
   83 *   `Assets/1.Scripts/Gameplay/CardEffectHandlers/WaveHandler.cs`
   84 *   `Assets/1.Scripts/Gameplay/MapGenerator.cs`
   85 *   `Assets/1.Scripts/Gameplay/PointAllocationManager.cs`
   86 *   `Assets/1.Scripts/UI/RouteSelectionController.cs`
   87 *   `Assets/1.Scripts/UI/MapView.cs`
   88 *   `Assets/1.Scripts/UI/MapNodeUI.cs`
   89 *   `Assets/1.Scripts/Data/MapNode.cs` (added Event type)
   90 *   `Assets/1.Scripts/Data/RoundDataSO.cs` (data structure for waves)
   91
   92 ---